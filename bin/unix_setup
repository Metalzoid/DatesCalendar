#!/usr/bin/env ruby
require 'fileutils'

# path to your application root.
APP_ROOT = File.expand_path('..', __dir__)

def system!(*args)
  system(*args, exception: true)
end

def prompt_for_env_var(var_name)
  print "== What is your #{var_name}? "
  value = gets.chomp
  if value.empty?
    puts "Error: #{var_name} cannot be empty."
    exit 1
  end
  value
end

def write_in_env(env_vars)
  File.open('.env', 'w') do |file|
    env_vars.each { |key, value| file.puts "#{key}=#{value}" }
  end
end

FileUtils.chdir APP_ROOT do
  # This script is a way to set up or update your development environment automatically.
  # This script is idempotent, so that you can run it at any time and get an expectable outcome.
  # Add necessary setup steps to this file.

  puts '== Installing dependencies =='
  system! 'gem install bundler --conservative'
  system('bundle check') || system!('bundle install')

  # puts "\n== Copying sample files =="
  # unless File.exist?("config/database.yml")
  #   FileUtils.cp "config/database.yml.sample", "config/database.yml"
  # end
  #
  puts "\n== This API using Mailtrap? (y/n)"
  answer = gets.chomp.upcase

  puts "\n== Creating .ENV file =="
  system! 'rm .env && touch .env'
  if answer == 'Y'
    env_vars = {
      'MAILTRAP_USERNAME' => prompt_for_env_var('Mailtrap username'),
      'MAILTRAP_PASSWORD' => prompt_for_env_var('Mailtrap password'),
      'MAILTRAP_API_KEY' => prompt_for_env_var('Mailtrap API Key'),
      'USE_MAILTRAP' => 'true'
    }
  else
    env_vars = {
      'USE_MAILTRAP' => 'false'
    }
  end
  write_in_env(env_vars)
  system! 'bin/jwt_setup'

  puts "\n== Preparing database =="
  puts "\n== WARNING ! DELETING ALL DATA in the DB! Continue ?(y/n) =="
  system! 'bin/rails db:drop db:create db:migrate' if gets.chomp.upcase == 'Y'

  puts "\n== Removing old logs and tempfiles =="
  system! 'bin/rails log:clear tmp:clear'

  puts "\n== Restarting server... =="
  system! 'bin/rails restart'

  puts "\n== Setup complete =="
end
